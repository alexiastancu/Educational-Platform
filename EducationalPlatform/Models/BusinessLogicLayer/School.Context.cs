//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EducationalPlatform.Models.BusinessLogicLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolEntities : DbContext
    {
        public SchoolEntities()
            : base("name=SchoolEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Absente> Absente { get; set; }
        public virtual DbSet<AsocieriAnSpecMaterie> AsocieriAnSpecMaterie { get; set; }
        public virtual DbSet<AsocieriElevAnSpec> AsocieriElevAnSpec { get; set; }
        public virtual DbSet<AsocieriProfMaterieClasa> AsocieriProfMaterieClasa { get; set; }
        public virtual DbSet<Clase> Clase { get; set; }
        public virtual DbSet<Diriginti> Diriginti { get; set; }
        public virtual DbSet<Elevi> Elevi { get; set; }
        public virtual DbSet<MaterialeDidactice> MaterialeDidactice { get; set; }
        public virtual DbSet<Materii> Materii { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<Profesori> Profesori { get; set; }
        public virtual DbSet<Specializari> Specializari { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Utilizatori> Utilizatori { get; set; }
    
        public virtual int AuthenticateUser(string username, string role, ObjectParameter userId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthenticateUser", usernameParameter, roleParameter, userId);
        }
    
        public virtual int DeleteElev(Nullable<int> id, string nume, string prenume)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("Prenume", prenume) :
                new ObjectParameter("Prenume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteElev", idParameter, numeParameter, prenumeParameter);
        }
    
        public virtual int DeleteElev_Utilizator(Nullable<int> idUtilizator)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteElev_Utilizator", idUtilizatorParameter);
        }
    
        public virtual int DeleteMaterie(Nullable<int> id, string numeMaterie)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var numeMaterieParameter = numeMaterie != null ?
                new ObjectParameter("NumeMaterie", numeMaterie) :
                new ObjectParameter("NumeMaterie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMaterie", idParameter, numeMaterieParameter);
        }
    
        public virtual int DeleteProfesor_Utilizator(Nullable<int> idUtilizator)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfesor_Utilizator", idUtilizatorParameter);
        }
    
        public virtual int DeleteProfessor(Nullable<int> id, string nume, string prenume)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("Prenume", prenume) :
                new ObjectParameter("Prenume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfessor", idParameter, numeParameter, prenumeParameter);
        }
    
        public virtual int DeleteSpecializare(Nullable<int> id, string nume)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecializare", idParameter, numeParameter);
        }
    
        public virtual int DeleteUtilizator(Nullable<int> idUtilizator)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUtilizator", idUtilizatorParameter);
        }
    
        public virtual ObjectResult<GetAllElevi_Result> GetAllElevi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllElevi_Result>("GetAllElevi");
        }
    
        public virtual ObjectResult<GetAllProfessors_Result> GetAllProfessors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProfessors_Result>("GetAllProfessors");
        }
    
        public virtual ObjectResult<GetAllSpecializari_Result> GetAllSpecializari()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSpecializari_Result>("GetAllSpecializari");
        }
    
        public virtual ObjectResult<GetAllUtilizatori_Result> GetAllUtilizatori()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUtilizatori_Result>("GetAllUtilizatori");
        }
    
        public virtual ObjectResult<GetClase_Result> GetClase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClase_Result>("GetClase");
        }
    
        public virtual ObjectResult<GetMaterii_Result> GetMaterii()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaterii_Result>("GetMaterii");
        }
    
        public virtual ObjectResult<GetPeople_Result> GetPeople()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPeople_Result>("GetPeople");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateElev(Nullable<int> elevID, string nume, string prenume, Nullable<int> utilizatorID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("ElevID", elevID) :
                new ObjectParameter("ElevID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("Prenume", prenume) :
                new ObjectParameter("Prenume", typeof(string));
    
            var utilizatorIDParameter = utilizatorID.HasValue ?
                new ObjectParameter("UtilizatorID", utilizatorID) :
                new ObjectParameter("UtilizatorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateElev", elevIDParameter, numeParameter, prenumeParameter, utilizatorIDParameter);
        }
    
        public virtual int UpdateEsteDiriginte(Nullable<int> profesorID, Nullable<bool> esteDiriginte)
        {
            var profesorIDParameter = profesorID.HasValue ?
                new ObjectParameter("ProfesorID", profesorID) :
                new ObjectParameter("ProfesorID", typeof(int));
    
            var esteDiriginteParameter = esteDiriginte.HasValue ?
                new ObjectParameter("esteDiriginte", esteDiriginte) :
                new ObjectParameter("esteDiriginte", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEsteDiriginte", profesorIDParameter, esteDiriginteParameter);
        }
    
        public virtual int UpdateMaterie(Nullable<int> materieID, string numeMaterie)
        {
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("MaterieID", materieID) :
                new ObjectParameter("MaterieID", typeof(int));
    
            var numeMaterieParameter = numeMaterie != null ?
                new ObjectParameter("NumeMaterie", numeMaterie) :
                new ObjectParameter("NumeMaterie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMaterie", materieIDParameter, numeMaterieParameter);
        }
    
        public virtual int UpdateProfessor(Nullable<int> professorID, string nume, string prenume, Nullable<bool> esteDiriginte, Nullable<int> utilizatorID)
        {
            var professorIDParameter = professorID.HasValue ?
                new ObjectParameter("ProfessorID", professorID) :
                new ObjectParameter("ProfessorID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("Prenume", prenume) :
                new ObjectParameter("Prenume", typeof(string));
    
            var esteDiriginteParameter = esteDiriginte.HasValue ?
                new ObjectParameter("esteDiriginte", esteDiriginte) :
                new ObjectParameter("esteDiriginte", typeof(bool));
    
            var utilizatorIDParameter = utilizatorID.HasValue ?
                new ObjectParameter("UtilizatorID", utilizatorID) :
                new ObjectParameter("UtilizatorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProfessor", professorIDParameter, numeParameter, prenumeParameter, esteDiriginteParameter, utilizatorIDParameter);
        }
    
        public virtual int UpdateSpecializare(Nullable<int> specializareID, string nume)
        {
            var specializareIDParameter = specializareID.HasValue ?
                new ObjectParameter("SpecializareID", specializareID) :
                new ObjectParameter("SpecializareID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpecializare", specializareIDParameter, numeParameter);
        }
    
        public virtual int UpdateUtilizator(Nullable<int> utilizatorID, string nume, string parola, string rol)
        {
            var utilizatorIDParameter = utilizatorID.HasValue ?
                new ObjectParameter("UtilizatorID", utilizatorID) :
                new ObjectParameter("UtilizatorID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("Parola", parola) :
                new ObjectParameter("Parola", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUtilizator", utilizatorIDParameter, numeParameter, parolaParameter, rolParameter);
        }
    }
}
